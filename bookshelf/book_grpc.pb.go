// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bookshelf/book.proto

package bookshelf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookHandlerClient is the client API for BookHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookHandlerClient interface {
	// Returns a book based on Book.name
	GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error)
}

type bookHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookHandlerClient(cc grpc.ClientConnInterface) BookHandlerClient {
	return &bookHandlerClient{cc}
}

func (c *bookHandlerClient) GetBook(ctx context.Context, in *GetBookRequest, opts ...grpc.CallOption) (*GetBookResponse, error) {
	out := new(GetBookResponse)
	err := c.cc.Invoke(ctx, "/bookshelf.BookHandler/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookHandlerServer is the server API for BookHandler service.
// All implementations must embed UnimplementedBookHandlerServer
// for forward compatibility
type BookHandlerServer interface {
	// Returns a book based on Book.name
	GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error)
	mustEmbedUnimplementedBookHandlerServer()
}

// UnimplementedBookHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedBookHandlerServer struct {
}

func (UnimplementedBookHandlerServer) GetBook(context.Context, *GetBookRequest) (*GetBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookHandlerServer) mustEmbedUnimplementedBookHandlerServer() {}

// UnsafeBookHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookHandlerServer will
// result in compilation errors.
type UnsafeBookHandlerServer interface {
	mustEmbedUnimplementedBookHandlerServer()
}

func RegisterBookHandlerServer(s grpc.ServiceRegistrar, srv BookHandlerServer) {
	s.RegisterService(&BookHandler_ServiceDesc, srv)
}

func _BookHandler_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHandlerServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookshelf.BookHandler/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHandlerServer).GetBook(ctx, req.(*GetBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookHandler_ServiceDesc is the grpc.ServiceDesc for BookHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookshelf.BookHandler",
	HandlerType: (*BookHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBook",
			Handler:    _BookHandler_GetBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookshelf/book.proto",
}
